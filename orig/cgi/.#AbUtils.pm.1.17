package AbUtils;

use AbHeader;
#use CatTree;

local *obj = *main::obj;
local *dbh = *main::dbh;
1;

##############################################################
sub string_is {
	my $str = shift;

	if ($str =~ /^(https?|file|ftp):/) {
		return $IS_URL;
	} elsif ($str =~ /^abra:/) {
		return $IS_ABRAURL;
	}		
	return 0;
}

##############################################################
# abra://server/cat/subcat/subsubcat
# abra:handle	 (assume local context)
# abra:/cat/subcat/subsubcat (assume local context)
sub resolve_aburl {
	my $aburl = shift;

	if ($aburl =~ /^abra:([^\/]+)$/) {
		return &resolve_handle($1);
	} elsif (($aburl =~ /^abra:\/\/(.+)$/)||($aburl =~ /^abra:\/([^\/].+)$/)) {
		return &resolve_catpath($1);
	} else {
		return ();
	}
}

##############################################################
sub resolve_handle {
	my $handle = shift;

	local *dbh = *main::dbh;

	$q = "select ID, TYPE from handles where handle = ".$dbh->quote($handle);
	my $sth = $dbh->prepare($q);
	$sth->execute();
	my ($id, $type) = $sth->fetchrow_array;
	return ($id, $type);
}

##############################################################
sub get_handle_list {
	my $ref;		
	my @harr = ();

local *dbh = *main::dbh;

#TODO : add userid
	$q = "select handles.ID, handles.HANDLE, $ITEM_TABLE.NAME from handles, 
$ITEM_TABLE where handles.ID = $ITEM_TABLE.ID AND handles.TYPE='I'";
	&get_query_results(\@harr, $q);
	$q = "select handles.ID, handles.HANDLE, $CAT_TABLE.NAME from handles, $CAT_TABLE where handles.ID = $CAT_TABLE.ID and handles.TYPE='C'";
	$sth = $dbh->prepare($q);
	if ($sth && $sth->execute()) {
		while ($ref = $sth->fetchrow_hashref('NAME_uc')) {
			$ref->{'ISCATEGORY'} = 'Y';
			push @harr, $ref;
		}
		$sth->finish();
	}
	return \@harr;		

} 


##############################################################
sub resolve_catpath {


}


##############################################################
sub get_userprefs {
	($prefs,$href) = @_;

	($prefs && $SHOWDELMASK) && ($href->{'SHOW_DELETE'} = 1);
}


# TODO: hash all routine inputs!!!!
#my %param = shift;

##############################################################
sub add_subcat {

local *obj = *main::obj;
local *dbh = *main::dbh;

	my %param = (
		cid => 0,
		newcatname => '',
		value => '',
		@_
	);
	my $cattypesref = $param{'cattypesref'};
	my $newid = 0;

	my $qualifier = '';
	foreach my $cattype (@$cattypesref) {
		$qualifier .= "TYPE:$cattype,";		# Do we want TYPE:x,TYPE:y or TYPE:x,y ??? TODO
	}
	chop $qualifier;

	my $catcode = &GenSubCatCode($param{'cid'});
	my $qcatcode = $dbh->quote($catcode);

	$newid = $obj->add('type'=>'CATEGORY', 'category'=>$param{cid}, 'name'=>$param{newcatname}, 'value'=>$param{value}, columns=>{'QUALIFIER'=>$qualifier});

# obj->add does not handle our pre-quoted binary catcode string correctly	
	$q = "update $CAT_TABLE set catcode = $qcatcode where id = $newid";
	$dbh->do($q);


	if ($newid) {

		if ($debug) {
			print "Added new subcategory: $newid<br>\n";
		}
	} else {
		print "Error: ", $obj->error,"<p>\n";
		print "Query was ",$obj->history('lastquery'),"<p>\n";
	} 
	
	return $newid;
}

# Generate new catcode for new subcategory of parent cat passed
sub GenSubCatCode {
	my $parentcid = shift;

local *obj = *main::obj;
local *dbh = *main::dbh;
	my $catcode = '';

	my $q = "select cid, catcode, lastsubcode from $CAT_TABLE where id = $parentcid";
	my ($grandparentcid, $parentcode, $lastsubcode) = $dbh->selectrow_array($q);
	my @catcode = ();

## TODO check is '' same as pack "C16" array of 0 ?

	if (! $parentcode && ($parentcid > 0)) { # need info, not on top level, recurse

		$parentcode = &GenSubCatCode($grandparentcid);
		$qparentcode = $dbh->quote($parentcode);
print "Setting parent id $parentcid to code ",&catcodestr($parentcode)," based on grandparent $granparentcid \n<br>";
		$q = "update $CAT_TABLE set catcode = $qparentcode, lastsubcode=0 where id=$parentcid";
		$dbh->do($q);
		# don't return - now proceed to set our catcode
	}

	if ($parentcode) {	# Do we have a valid parent catcode?
       		@catcode = unpack "C16", $parentcode;
		my $lvl = &GetLevel(\@catcode) + 1;
		$lastsubcode++;
		$catcode[$lvl] = $lastsubcode;
		$catcode = pack "C16",@catcode;
		$q = "update $CAT_TABLE set lastsubcode = $lastsubcode where id = $parentcid";
		$dbh->do($q);
		return($catcode);
	} elsif ($parentcid == 0) {	# If we already are on top level
		@catcode = (0) x 16;
		if (! defined($lastsubcode)) {
			$lastsubcode = 0;
		}
		my $lvl = 0;
		$rootcatcode = pack "C16",@catcode;
		$qrootcatcode = $dbh->quote($rootcatcode);
		$lastsubcode++;
		$catcode[$lvl] = $lastsubcode;
		$catcode = pack "C16",@catcode;
print "Parent is root; Set category at level $lvl to ",&catcodestr($catcode)," for child of $parentcid whose code was ",&catcodestr($parentcode),"<br>\n";
		$q = "update $CAT_TABLE set lastsubcode = $lastsubcode,catcode=$qrootcatcode where id = $parentcid";
		$dbh->do($q);
		return($catcode);
	} 

	# should never happen
	return '';
}

# Returns index of last nonzero level;
# category 01 04 80 0 0 0 0 would be level 2
sub GetLevel {
        my $catref = shift;
                                                                               
        my $lvl = 0;
        while (($lvl < 16) && ($$catref[$lvl] > 0)) {
                $lvl++;
        }
        return ($lvl - 1);
}

sub CatCodeFromArray {
		my @cats = @_;
		my $catid = pack "C16", @cats;
}

sub RootCatCode {
	my @cats = (0) x 16;
	my $catcode = &CatCodeFromArray(@cats);
	return $catcode;
}

# maybe have other kinds of things we can attach to a relation - but text will be most common
##############################################################
sub add_related_text {
	my $cid = shift;
	my $itemid = shift;
	my $relation = shift || $DEFAULT_TEXT_RELATION;
	my $text = shift;

local *obj = *main::obj;
local *dbh = *main::dbh;
	# create relation first, we need uid
	my $uid = $obj->r_add(type=>'item',id=>$itemid,relation=>$relation, columns=>{'QUALIFIER'=>'TYPE:relatedcontent'});

## Patch in case Rcategories.pm doesn't do qualifier
#my $dumq = "Update rcatdb_ritems set qualifier='TYPE:relatedcontent'
#where (uid=$uid) and (qualifier IS NULL)";
#my $dumsth = $dbh->prepare($dumq);
##print "dum patch is $dumq\n";
#$dumsth->execute;
# end dum patch

	if (! $uid) {
		print "Error: ",$obj->error,"\n";
		print "Query was ",$obj->history('lastquery'),"<p>\n";
	}		
	# now add entry for text
	my $q = "INSERT INTO relatedcontent SET uid = $uid, text=".$dbh->quote($text);
	my $sth = $dbh->prepare($q);
	$sth->execute;
}

##############################################################
sub add_related {
	my $id = shift;
	my $type = shift;
	my $string = shift;
	my $relation = shift;

local *obj = *main::obj;
local *dbh = *main::dbh;
	$type = $RELTYPES->{$type};
	my $hid = 0;
	my $htype = '';
	($hid, $htype) = &resolve_handle($string);
	my $uid = 0;
	if ($hid) {
		$uid = &add_relation($id, $type, $hid, $htype, $relation);
	} else {
		$uid = $obj->r_add(type=>$type,id=>$id,qualifier=>$string,relation=>$relation);
	}
	if (! $uid) {
		print "Error: ",$obj->error,"\n";
		print "Query was ",$obj->history('lastquery'),"<p>\n";
	}		

	return $uid;
}


##############################################################
sub add_relation {
	my $id = shift;
	my $fromtype = shift || $ITEMTYPE;
	my $destid = shift || 0;
	my $desttype = shift || $ITEMTYPE;
	my $relation = shift || $DEFAULT_RELATION;

local *obj = *main::obj;
local *dbh = *main::dbh;

	my $type = '';
	my $dest = '';
	if ($desttype eq $ITEMTYPE) {
		$dest = 'item_dest';
	} else {
		$dest = 'cat_dest';
	}

	if ($fromtype eq $ITEMTYPE) {
		$type = 'item';
	} else {
		$type = 'category';
	}

	my $uid = $obj->r_add(type=>$type,id=>$id,$dest=>$destid,relation=>$relation);

	return $uid;
}


##############################################################
sub add_item {
	my $cid = shift;
	my $itemname = shift;
	my $itemval = shift || '';
	my $handle = shift || '';
	my $iref = shift || 0;
	my $owner = shift || 0;
	my $qualifier = shift || '';

	my %quals = ();
	if ($iref && ! $qualifier) {
		$qualifier = &find_types($iref, \%quals);
	}
local *obj = *main::obj;
local *dbh = *main::dbh;
	# Item VALUE
	($linkid, $linktype) = (0,'');
	# preprocess value/URL of type abra://
	if (($linkid, $linktype) = resolve_aburl($itemval)) {
		if ($linktype eq $ITEMTYPE) {
			$itemval = &make_link(0,$linktype);
		} else {
			$itemval = &make_link($linktype);
		}
	}

	# Handle for this item

	my $newid = $obj->add('type'=>'ITEM', 'category'=>$cid, 'name'=>$itemname, 'value'=>$itemval, columns=>{'QUALIFIER'=>$qualifier});
# 'owner'=>$owner
	if ($handle) {
		&add_handle($newid, $handle, $ITEMTYPE); #TODO: userid
	} 
	
	# VALUE/URL for this item - may be link to existing item
	if ($linkid) {
		&add_relation($newid, $ITEMTYPE, $linkid, $linktype, 'HOME');
	}

	if (! $newid ) {
		print "Error: ", $obj->error,"<p>\n";
	} 
	if ($debug && $newid) {
		print "Added new item: $newid<br>\n";
	}

	&add_to_tables($newid, \%quals);
	return $newid;
}

################################################################
#  Find types from web input where key = "TYPE:xxx", value=value
#
sub find_types {
	my $iref = shift;
	my $tref = shift;

	my $qualifier = '';
	foreach $key (keys %$iref) {
		if ($key =~ /^TYPE:([a-zA-Z0-9_-]+):([a-zA-Z0-9_-]+)$/i) {
			$tref->{$1}->{$2} = $iref->{$key};
		}
	}

# TODO: look for at least 1 non-null item before adding that type

	return &make_type_string($tref);
}

################################################################
#  Make TYPES:xxx,yyy,zzz type string from hash of hashes
#  where keys of parent hash are type (table) names
#
sub make_type_string {
	my $href = shift;
	
	my $qualifier = join(',',(keys %$href)) || '';
	$qualifier && ($qualifier = 'TYPES:'.$qualifier);
	
	return $qualifier;
}
	
# return array of types
sub parse_type_string {
	my $s = shift;

	my @tarr = ();
	if ($s =~ /TYPES:([^\s]+)/) {
		@tarr = split(/\,/,$1);	
	}
	return @tarr;
}	


##############################################################
sub add_handle {
	my $id = shift || return;
	my $handle = shift || '';
	my $type = shift || 'I';

local *obj = *main::obj;
local *dbh = *main::dbh;

	$sqlst = "INSERT into handles SET id=$id, handle=".$dbh->quote($handle).",type=".$dbh->quote($type);
	my $sth = $dbh->prepare($sqlst);
	$sth->execute;
}

##############################################################
sub add_to_tables {
	my $id = shift;
	my $tref = shift;
	my $sqlst;

local *obj = *main::obj;
local *dbh = *main::dbh;

# TODO be robust against undefined fields
	foreach $tname (keys %$tref) {
		# get field list for this table
		# TODO find the 'right' way to do this instead of this hokey thing
		my $q = "select * from $tname where 1=0";
		my $sth = $dbh->prepare($q);
		$sth->execute;
		my $anameref = $sth->{NAME};
		my $oknames = join(' ',@$anameref);
		$sqlst = "INSERT into $tname SET id=$id";
		my $rref = $tref->{$tname};
		foreach $key (keys %$rref) {
			if (defined($rref->{$key}) && ($oknames =~ /\b$key\b/)) {
				$sqlst .= ", $key=".$dbh->quote($rref->{$key});
			}
		}
		$sth = $dbh->prepare($sqlst);
		$sth->execute;
	}
	return 1;
}

##############################################################
sub del_cat {
	my $cid = shift;

local *obj = *main::obj;
	return $obj->del('type'=>'CATEGORY','id'=>$cid);
}

##############################################################
sub del_item {
	my $id = shift;
local *obj = *main::obj;
local *dbh = *main::dbh;
	my $q = "delete from handles where type='$ITEMTYPE' and id=$id";
	my $sth = $dbh->prepare($q);
	$sth->execute;
	return $obj->del('type'=>'ITEM','id'=>$id);
}


##############################################################
sub getcatfromitem {
	my $item = shift;
	@res = $obj->find('search'=>$item,'by'=>'ID', 'route'=>'YES');
	return $res[0]->{'CID'};
}

##############################################################
sub getcatfromuser {
	my $user = shift;
	my $q = "select catlast,cathome from user where username = '$user'";
        my $sth = $dbh->prepare($q);
	my $cid = 0;
	my $cid2 = 0;
        if ($sth) {
		$sth->execute();
        	($cid,$cid2) = $sth->fetchrow_array;
		$cid = $cid || $cid2;
	}
	return($cid);	
}

##############################################################
sub getnamefromid {
	my $item = shift;
	@res = $obj->find('search'=>$item,'by'=>'ID','route'=>'NO');
	return $res[0]->{'NAME'};
}




##############################################################
sub get_relations {
	my ($id, $type, $filter, $ref) = @_;

	@$ref = $obj->r_list($type=>$id,'filter'=>$filter);
	my @types = ();
	foreach my $href (@$ref) {
		if ($href->{'ITEM_DEST'} && $href->{'CAT_DEST'}) {
			$href->{'LINK'} = &make_link($href->{'CID'},$href->{'ID'});
			$href->{'NAME'} = &make_catpath($href->{'CAT_DEST'});
		} elsif ($href->{'ITEM_DEST'}) {
			$href->{'LINK'} = &make_link($href->{'ID'});
			$href->{'NAME'} = &getnamefromid($href->{'ITEM_DEST'});
		} elsif ($IS_URL == &string_is($href->{'QUALIFIER'})) {
			$href->{'LINK'} = $href->{'QUALIFIER'};
		} elsif (&has_table_entries($href->{'ID'},$href->{'QUALIFIER'},\@types)) {
			$href->{'LINK'} = &make_table_link($href->{'CID'},$href->{'ID'},\@types);
		}

		if ($href->{'NAME'} eq '') {
			$href->{'NAME'} = $href->{'QUALIFIER'} || $href->{'RELATION'};
		}
	}
	return $ref;
}

#############################################################
# Get table names from qualifier string
sub has_table_entries {
	my $id = shift; 	# for index
	my $qualstring = shift;
	my $aref = shift;

#TODO decide the best way to insert generic database table data with overridable user views
}


##############################################################
# make link to related data in specific table fields
sub make_table_link {
	my $cid - shift || 0;	# for back link
	my $id = shift || 0;   # for back link
	my $aref = shift || return('');	  # need array of table names & indices 
}

##############################################################
sub make_link {
	my $cid = shift || return('');
	my $id = shift || 0;
	my %extra = @_;

	my $link = $THISCGI."?_USERPREF=$userpref&_CATID=$cid";

	if ($id) {
		$link .= "&_ITEMID=$id";
	}

	for my $key (keys %extra) {
		$link .= "&".$key."=".$extra{$key};
	}

	return $link;
}

sub make_href_link {
	return "<A HREF=\"".&make_link(@_)."\">";
}
##############################################################
# returns all subcategories of given category as array of hashes
sub get_subcats {
	my $curcat = shift;
	my $subcatref = shift;

# return array of hashes w/ID,NAME,VALUE,QUALIFIER	
	@$subcatref = $obj->find('search'=>$curcat,'by'=>'CID','sort'=>'NAME','filter'=>'CATEGORIES','multiple');
# add entries for deleting each cat
	for $p (@$subcatref) {
		my $id =$p->{'ID'};
		$p->{DEL_CAT} = &make_href_link($curcat,0,_DELCAT=>$id)."X</A>";
	}
	#TODO move this more into template, or at least read TemplateBits file
# now add related cats
#	my @relcats = $obj->r_find('search'=>$curcat,'by'=>'ID', 'filter'=>'CATEGORIES','additional'=>"RELATION='$HAS_SUBCAT'", 'multiple');
#	push @relcats, $obj->r_find('search'=>$curcat,'by'=>'CAT_DEST','filter'=>'CATEGORIES','additional'=>"RELATION='$IS_SUBCAT_OF'",'multiple');

	my @relcats = ();
	my $q = "select $CAT_TABLE.* from $CAT_TABLE, $RCAT_TABLE where $RCAT_TABLE.ID = $curcat AND $CAT_TABLE.ID = $RCAT_TABLE.CAT_DEST AND $RCAT_TABLE.RELATION = '$HAS_SUBCAT'";

print "Executing $q \n<p>";
	&get_query_results(\@relcats, $q);
	$q = "select $CAT_TABLE.* from $CAT_TABLE, $RCAT_TABLE where $RCAT_TABLE.CAT_DEST = $curcat AND $CAT_TABLE.ID = $RCAT_TABLE.ID AND $RCAT_TABLE.RELATION = '$IS_SUBCAT_OF'";

print "Executing $q \n<p>";
	&get_query_results(\@relcats, $q);

	for $p (@relcats) {
		$p->{NAME} = '@'.$p->{NAME};
	}
	push @$subcatref, @relcats;

	return $subcatref;
}

####################################################################
# returns all subcategories of given category as array of hashes
sub get_catitems {
	my $curcat = shift;
	my $itemref = shift;

# return array of hashes w/ID,NAME,VALUE,QUALIFIER	
	@$itemref = $obj->find('search'=>$curcat,'by'=>'CID','sort'=>'NAME','filter'=>'ITEMS','multiple');

# values->urls if match
	for $p (@$itemref) {
		if (&string_is($p->{'VALUE'}) == $IS_URL) {
			$p->{'LINK'} = $p->{'VALUE'};
		} else {
		    $p->{'PLAINVALUE'} = $p->{'VALUE'};
		}
		$p->{DEL_ITEM} = &make_href_link($curcat,0,_DELITEM=>$p->{'ID'})."X</A>";

#TODO: improve templating
	
		$p->{META_DESCRIPTION};
		$p->{RELATED_LINKS} = &make_rel_links($p->{'ID'});
	}
	#TODO use proper URL matching
}


sub make_rel_links {
	my $id = shift;

	my @related = ();
        &get_relations($id, 'item', 'ALL', \@related);

	my $linkstring = '';
	foreach my $rel (@related) {
		$linkstring .= "<A HREF='".$rel->{'LINK'}."'>".$rel->{'RELATION'}.":".$rel->{'NAME'}."</A> ";
	}
	return $linkstring;
}

sub fmt_array_for_table {
	my $aref = shift;
	my $cols = shift;

	my $j = 0;
	for my $href (@$aref) {
	
		if (($j % $cols) == 0) {
			$href->{FMT_BEGIN} = '<TR><TD>';
		} else {
			$href->{FMT_BEGIN} = '<TD>';
		}

		if (($j % $cols) == (-1 % $cols)) {
			$href->{FMT_END} = '</TD></TR>';
		} else {
			$href->{FMT_END} = '</TD>';
		}
		$j++;
	}
}



sub get_cat {
	my $catid = shift;

	@res = $obj->find('search'=>$catid,'sort'=>'ID','by'=>'ID','filter'=>'CATEGORIES','multiple'=>'YES',
                     'route'=>'YES','partial'=>'NO','reverse'=>'NO','rules'=>$rules);
	return $res[0];
}


sub make_catpath {

	my $catref = shift;

	my $retstring = "\\".&make_href_link(0)."root</A>\\";

	my $path = $catref->{'route'};
	my $j;

        for ($j = $#$path; $j>=0; $j--)
        {
	   $p = $$path[$j];
           $retstring .= &make_href_link($p->{'ID'}).$p->{'NAME'}."</A>\\";
        }
	$retstring .= &make_href_link($catref->{'ID'}).$catref->{'NAME'}."</A>\\";

	return $retstring;
}



sub ErrorExit {

        my $msg = shift;

#	$msg = &subvars($msg);

        print STDERR scalar localtime, "$msg";

        print "ERROR: $msg\n\n";

        if ($debug) {
                my $name;
                print "Inputs were: <p>\n";
                foreach $name (keys (%in)) {
                        print "$name = $in{$name} <p>\n";
                }
        }

        exit 0;
}

sub printhasharr {
	$ref = shift;
	foreach my $a (@$ref) {
		print "entry:",%$a;
		print "<br>\n";
	}
}

sub printarrarr {

	$ref = shift;
	foreach my $l (@$ref) {
		print "entry:",@$l;
         my ($t,$uid,$id,$type,$cat,$item,$qualifier) = @$l;
         print "Type:   $t<BR>\n";
         print "UID:    $uid<BR>\n";
         print "ID:     $id<BR>\n";
         print "TYPE:   $type<BR>\n";
         print "CAT:    $cat<BR>\n";
         print "ITEM:   $item<BR>\n";
         print "QUALIFIER:  $qualifier<BR>\n";

		print "<br>\n";
	}
}

################
sub testprint {
   if(!$obj->errorno())
     {
      foreach $l (@res)
       {
       	 # Take attantion of new $qualifier field...
       	 my %inp = %$l;
         my ($type,$id,$parent_category,$name,$value,$qualifier,$route) =
            ($inp{'type'},$inp{'ID'},$inp{'CID'},$inp{'NAME'},$inp{'VALUE'},$inp{'QUALIFIER'},$inp{'route'});
         print "Type:   $type<BR>\n";
         print "ID:     $id<BR>\n";
         print "PARENT: $parent_category<BR>\n";
         print "NAME:   $name<BR>\n";
         print "VALUE:  $value<BR>\n";
         print "PATH:   ";
         my @path = @$route;
         foreach my $p (@path)
          {
	   print "\\".$p->{'NAME'};
          }
         print "<BR>\n";
       }
     }
    print "<HR>\n";
}


# Get item as hash
sub get_item_byid {
	my $id = shift;
local *obj = *main::obj;
local *dbh = *main::dbh;
	my $q = "select * from $ITEM_TABLE where ID = $id";
	my $sth = $dbh->prepare($q);
	if ($sth && $sth->execute()) {
		my $ref = $sth->fetchrow_hashref('NAME_uc');
		$sth->finish();
		return $ref;
	}
	return null;
}


sub get_query_results {
	my ($href, $q) = @_;

local *obj = *main::obj;
local *dbh = *main::dbh;
	my $sth = $dbh->prepare($q);
	if ($sth && $sth->execute()) {
		while (my $ref = $sth->fetchrow_hashref('NAME_uc')) {
			push @$href, $ref;
		}
		$sth->finish();
	}
}

# could check for existence of HTML::Defaultify
sub html_quotes {
	my $str = shift;

	$str =~ s/(['"])/\&quot;/g;
	return $str;
}
sub escape_quotes {
	my $href = shift;

	foreach my $key (keys %$href) {
		$href->{$key} =~ s/(['"])/\\$1/g;
	}
}

sub escape_quotes_str {
	my $str = shift;

	$str  =~ s/(['"])/\\$1/g;
	return $str;
}

sub catcodestr {
	my $code = shift;
	my @catcode = unpack "C16",$code;
	return join(':',@catcode);
}

sub dbcatcode {
	my $id =shift;
	my $q = "select * from $CAT_TABLE where id = $id";
	my $r = $dbh->selectrow_hashref($q);
	my $s = &catcodestr($r->{'catcode'});
	return($s);
}
